
import java.io.FileWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.io.FileReader;
import java.io.IOException;

public final class Administrator extends javax.swing.JFrame {

    private final String adminName;
    private final String usname;
    private boolean isPopulatingComboBox = false;
    private static final String DEFAULT_ACCOUNT_OPTION = "Select Account";

    private static final String[] FILE_PATH = {"src/QuizData.json", "src/UserData.json"};

    public Administrator(String adminName, String usname) {
        initComponents();
        this.adminName = adminName;
        this.usname = usname;

        configureDisableFeaturesTable(); // Configure the table model
        populateUserSelection_disable_account_feature(); // Populate user selection combo box
        welcomeMessage.setText("Welcome, Administrator " + adminName + "!");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        admin = new javax.swing.JPanel();
        welcomeMessage = new javax.swing.JLabel();
        editAccountButton = new javax.swing.JButton();
        disableFeatureButton = new javax.swing.JButton();
        menubutton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        Panes = new javax.swing.JTabbedPane();
        menu_pane = new javax.swing.JPanel();
        leaderboardButton = new javax.swing.JButton();
        historyButton = new javax.swing.JButton();
        createQuizButton = new javax.swing.JButton();
        deleteQuizButton = new javax.swing.JButton();
        editQuizButton = new javax.swing.JButton();
        profileButton = new javax.swing.JButton();
        edit_account_pane = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        saveEditButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        typeSelection = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        newUsernameField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        newPasswordField = new javax.swing.JTextField();
        accountToEditSelection = new javax.swing.JComboBox<>();
        disable_account_feature_pane = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        accountToDisableSelection = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        statusSelection = new javax.swing.JComboBox<>();
        saveStatusButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        disableFeaturesTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        admin.setBackground(new java.awt.Color(204, 204, 204));

        welcomeMessage.setText("Welcome Administrator");

        editAccountButton.setText("Edit a Account");
        editAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAccountButtonActionPerformed(evt);
            }
        });

        disableFeatureButton.setText("Disable a Account's Feature");
        disableFeatureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableFeatureButtonActionPerformed(evt);
            }
        });

        menubutton.setText("Menu");
        menubutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menubuttonActionPerformed(evt);
            }
        });

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminLayout = new javax.swing.GroupLayout(admin);
        admin.setLayout(adminLayout);
        adminLayout.setHorizontalGroup(
            adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminLayout.createSequentialGroup()
                .addGroup(adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adminLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(disableFeatureButton))
                    .addGroup(adminLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(welcomeMessage))
                    .addGroup(adminLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(logoutButton))
                    .addGroup(adminLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(menubutton))
                    .addGroup(adminLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(editAccountButton)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        adminLayout.setVerticalGroup(
            adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(welcomeMessage)
                .addGap(64, 64, 64)
                .addComponent(menubutton)
                .addGap(18, 18, 18)
                .addComponent(editAccountButton)
                .addGap(32, 32, 32)
                .addComponent(disableFeatureButton)
                .addGap(43, 43, 43)
                .addComponent(logoutButton)
                .addContainerGap(177, Short.MAX_VALUE))
        );

        getContentPane().add(admin, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 466));

        leaderboardButton.setText("Leaderboard");
        leaderboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaderboardButtonActionPerformed(evt);
            }
        });

        historyButton.setText("History");
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        createQuizButton.setText("Create Quiz");
        createQuizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createQuizButtonActionPerformed(evt);
            }
        });

        deleteQuizButton.setText("Delete Quiz");
        deleteQuizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteQuizButtonActionPerformed(evt);
            }
        });

        editQuizButton.setText("Edit Quiz");
        editQuizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editQuizButtonActionPerformed(evt);
            }
        });

        profileButton.setText("Profile");
        profileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menu_paneLayout = new javax.swing.GroupLayout(menu_pane);
        menu_pane.setLayout(menu_paneLayout);
        menu_paneLayout.setHorizontalGroup(
            menu_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menu_paneLayout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addGroup(menu_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(leaderboardButton, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(historyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createQuizButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteQuizButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editQuizButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(profileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(214, Short.MAX_VALUE))
        );
        menu_paneLayout.setVerticalGroup(
            menu_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menu_paneLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(leaderboardButton)
                .addGap(18, 18, 18)
                .addComponent(historyButton)
                .addGap(18, 18, 18)
                .addComponent(createQuizButton)
                .addGap(18, 18, 18)
                .addComponent(deleteQuizButton)
                .addGap(18, 18, 18)
                .addComponent(editQuizButton)
                .addGap(18, 18, 18)
                .addComponent(profileButton)
                .addContainerGap(184, Short.MAX_VALUE))
        );

        Panes.addTab("tab3", menu_pane);

        edit_account_pane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setText("Edit an Account Tab");
        edit_account_pane.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, -1, -1));

        saveEditButton.setText("Save Changes");
        saveEditButton.setEnabled(false);
        saveEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEditButtonActionPerformed(evt);
            }
        });
        edit_account_pane.add(saveEditButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 380, -1, -1));

        jLabel4.setText("List of Account");
        edit_account_pane.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 102, -1, -1));

        typeSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Game Master", "Player" }));
        typeSelection.setEnabled(false);
        edit_account_pane.add(typeSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 330, -1, -1));

        jLabel7.setText("Account's Type:");
        edit_account_pane.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 330, -1, -1));

        jLabel5.setText("----------------------");
        edit_account_pane.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, -1, -1));

        jLabel6.setText("New Username :");
        edit_account_pane.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, -1, -1));

        newUsernameField.setEnabled(false);
        edit_account_pane.add(newUsernameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 210, 160, -1));

        jLabel8.setText("----------------------");
        edit_account_pane.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, -1, -1));

        jLabel9.setText("New Password :");
        edit_account_pane.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 280, -1, -1));

        newPasswordField.setEnabled(false);
        edit_account_pane.add(newPasswordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 280, 160, -1));

        accountToEditSelection.setMaximumRowCount(100);
        accountToEditSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Account" }));
        accountToEditSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountToEditSelectionActionPerformed(evt);
            }
        });
        edit_account_pane.add(accountToEditSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 180, -1));

        Panes.addTab("tab1", edit_account_pane);

        jLabel2.setText("Disable an Account's Feature");

        jLabel11.setText("List of Account");

        accountToDisableSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Account" }));
        accountToDisableSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountToDisableSelectionActionPerformed(evt);
            }
        });

        jLabel13.setText("Feature");

        jLabel1.setText("Status of Account");

        statusSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Accessible", "Disabled" }));

        saveStatusButton.setText("Save");
        saveStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveStatusButtonActionPerformed(evt);
            }
        });

        disableFeaturesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Features", "Check to Disable"
            }
        ));
        jScrollPane1.setViewportView(disableFeaturesTable);

        javax.swing.GroupLayout disable_account_feature_paneLayout = new javax.swing.GroupLayout(disable_account_feature_pane);
        disable_account_feature_pane.setLayout(disable_account_feature_paneLayout);
        disable_account_feature_paneLayout.setHorizontalGroup(
            disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                .addGroup(disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                                .addComponent(statusSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(99, 99, 99)
                                .addComponent(saveStatusButton))
                            .addComponent(jLabel1)
                            .addComponent(jLabel11)
                            .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jLabel13))
                            .addGroup(disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2)
                                .addComponent(accountToDisableSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(171, Short.MAX_VALUE))
        );
        disable_account_feature_paneLayout.setVerticalGroup(
            disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, disable_account_feature_paneLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel2)
                .addGap(38, 38, 38)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accountToDisableSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveStatusButton))
                .addGap(74, 74, 74))
        );

        Panes.addTab("tab2", disable_account_feature_pane);

        getContentPane().add(Panes, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, -44, 460, 510));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void editAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAccountButtonActionPerformed

        Panes.setSelectedIndex(1);

    }//GEN-LAST:event_editAccountButtonActionPerformed

    private void disableFeatureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableFeatureButtonActionPerformed

        Panes.setSelectedIndex(2);

    }//GEN-LAST:event_disableFeatureButtonActionPerformed

    private void menubuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menubuttonActionPerformed

        Panes.setSelectedIndex(0);

    }//GEN-LAST:event_menubuttonActionPerformed

    private void saveEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEditButtonActionPerformed
        String selectedAccount = (String) accountToEditSelection.getSelectedItem();
        if (selectedAccount.equals(DEFAULT_ACCOUNT_OPTION)) {
            JOptionPane.showMessageDialog(this, "Please select an account to edit.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String newUsername = newUsernameField.getText().trim();
        String newPassword = newPasswordField.getText().trim();
        String newType = (String) typeSelection.getSelectedItem();

        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray accounts = (JSONArray) data.get("Accounts");

            for (Object obj : accounts) {
                JSONObject account = (JSONObject) obj;
                if (account.get("username").equals(selectedAccount)) {
                    if (!newUsername.isEmpty()) {
                        account.put("username", newUsername);
                    }
                    if (!newPassword.isEmpty()) {
                        account.put("password", newPassword);
                    }
                    if (newType != null) {
                        account.put("type", newType);
                    }
                    break;
                }
            }

            try (FileWriter writer = new FileWriter(FILE_PATH[1])) {
                writer.write(data.toJSONString());
            }

            JOptionPane.showMessageDialog(this, "Account updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            populateUserSelection();
            resetEditAccountFields();

        } catch (IOException | ParseException e) {
            Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, "Error updating account", e);
            JOptionPane.showMessageDialog(this, "An error occurred. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveEditButtonActionPerformed

    private void leaderboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaderboardButtonActionPerformed
        this.dispose(); // Dispose the current JFrame
        // Navigate to the Leaderboard with the Game Master's details
        new Leaderboard(adminName, null, null, usname).setVisible(true);
    }//GEN-LAST:event_leaderboardButtonActionPerformed

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed
        this.dispose(); // Dispose the current JFrame
        // Corrected the argument order and roles passed to the History class
        new History(adminName, usname, null, null).setVisible(true);
    }//GEN-LAST:event_historyButtonActionPerformed

    private void createQuizButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createQuizButtonActionPerformed
        this.dispose(); // Dispose the current JFrame
        new CreateQuiz(adminName, usname, null).setVisible(true);
    }//GEN-LAST:event_createQuizButtonActionPerformed

    private void deleteQuizButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteQuizButtonActionPerformed
        // Ensure any background processes or resources associated with the frame are cleaned up
        // Example: Stop timers, threads, or listeners here if applicable

        // Open the DeleteQuiz JFrame
        new DeleteQuiz(adminName, null, usname).setVisible(true);

        // Dispose of the current JFrame to release resources
        this.dispose();

        // Debugging: Print all active frames to ensure this frame is disposed
        for (java.awt.Frame frame : java.awt.Frame.getFrames()) {
            System.out.println(frame.getClass().getName() + " is visible: " + frame.isVisible());
        }
    }//GEN-LAST:event_deleteQuizButtonActionPerformed

    private void editQuizButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editQuizButtonActionPerformed
        new EditQuizTable(adminName, null, usname, null).setVisible(true); // Open the new JFrame
        this.dispose(); // Dispose the current JFrame
    }//GEN-LAST:event_editQuizButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        new SignIn(usname, "pass").setVisible(true); // Open the SignIn JFrame
        this.dispose(); // Dispose this JFrame and release resources
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void accountToEditSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountToEditSelectionActionPerformed
        // Check if the action listener should be ignored (i.e., during population)
        if (isPopulatingComboBox) {
            return;
        }

        String selectedAccount = (String) accountToEditSelection.getSelectedItem();

        // Check if no item is selected or the default "Select Account" is selected
        if (selectedAccount == null || selectedAccount.equals("Select Account")) {
            disableEditFields(); // Disable all edit fields
            JOptionPane.showMessageDialog(this, "Please select an account to edit.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            // Parse the JSON file
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray accounts = (JSONArray) data.get("Accounts");

            for (Object obj : accounts) {
                JSONObject account = (JSONObject) obj;

                // Find the selected account and populate fields
                if (account.get("username").equals(selectedAccount)) {
                    newUsernameField.setText((String) account.get("username"));
                    newPasswordField.setText((String) account.get("password"));
                    typeSelection.setSelectedItem((String) account.get("type"));

                    enableEditFields(); // Enable fields for editing
                    return;
                }
            }
        } catch (IOException | ParseException e) {
            Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Error loading account details. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_accountToEditSelectionActionPerformed

    private void profileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileButtonActionPerformed
        // Pass empty strings ("") instead of null for gameMasterName and playerName
        new Profile(adminName, "", "", usname).setVisible(true);
        this.dispose(); // Dispose the current JFrame
    }//GEN-LAST:event_profileButtonActionPerformed

    private void accountToDisableSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountToDisableSelectionActionPerformed
        if (isPopulatingComboBox) {
            return;
        }

        String selectedAccount = (String) accountToDisableSelection.getSelectedItem();
        if (selectedAccount == null || selectedAccount.equals("Select Account")) {
            JOptionPane.showMessageDialog(this, "Please select an account to edit.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray accounts = (JSONArray) data.get("Accounts");

            for (Object obj : accounts) {
                JSONObject account = (JSONObject) obj;
                if (account.get("username").equals(selectedAccount)) {
                    String type = (String) account.get("type");
                    String status = (String) account.get("status");
                    statusSelection.setSelectedItem(status);
                    populateDisableFeaturesTable(type, account);
                    break;
                }
            }
        } catch (IOException | ParseException e) {
            Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Error loading account details. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_accountToDisableSelectionActionPerformed

    private void saveStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveStatusButtonActionPerformed
        String selectedAccount = (String) accountToDisableSelection.getSelectedItem();
        if (selectedAccount == null || selectedAccount.equals("Select Account")) {
            JOptionPane.showMessageDialog(this, "Please select an account to edit.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String newStatus = (String) statusSelection.getSelectedItem();
        DefaultTableModel model = (DefaultTableModel) disableFeaturesTable.getModel();
        JSONArray disabledFeatures = new JSONArray();

        for (int i = 0; i < model.getRowCount(); i++) {
            boolean isDisabled = (Boolean) model.getValueAt(i, 1);
            if (isDisabled) {
                disabledFeatures.add((String) model.getValueAt(i, 0));
            }
        }

        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray accounts = (JSONArray) data.get("Accounts");

            boolean changesMade = false;

            for (Object obj : accounts) {
                JSONObject account = (JSONObject) obj;
                if (account.get("username").equals(selectedAccount)) {
                    if (!account.get("status").equals(newStatus)) {
                        account.put("status", newStatus);
                        changesMade = true;
                    }
                    if (!account.get("disabledFeature").equals(disabledFeatures)) {
                        account.put("disabledFeature", disabledFeatures);
                        changesMade = true;
                    }
                    break;
                }
            }

            if (!changesMade) {
                JOptionPane.showMessageDialog(this, "Nothing was changed.", "Info", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            try (FileWriter writer = new FileWriter(FILE_PATH[1])) {
                writer.write(data.toJSONString());
                writer.flush();
            }

            JOptionPane.showMessageDialog(this, "Changes saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException | ParseException e) {
            Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Error saving changes. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveStatusButtonActionPerformed

    private void populateUserSelection_disable_account_feature() {
        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray accounts = (JSONArray) data.get("Accounts");

            isPopulatingComboBox = true;
            accountToDisableSelection.removeAllItems();
            accountToDisableSelection.addItem("Select Account");

            for (Object obj : accounts) {
                JSONObject account = (JSONObject) obj;
                accountToDisableSelection.addItem((String) account.get("username"));
            }
            isPopulatingComboBox = false;
        } catch (IOException | ParseException e) {
            Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Error loading accounts. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void populateUserSelection() {
        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            // Parse the JSON file
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray accounts = (JSONArray) data.get("Accounts");

            isPopulatingComboBox = true; // Set flag to true to prevent action listener from firing
            accountToEditSelection.removeAllItems(); // Clear current items
            accountToEditSelection.addItem("Select Account"); // Default option

            for (Object obj : accounts) {
                JSONObject account = (JSONObject) obj;
                accountToEditSelection.addItem((String) account.get("username"));
            }
            isPopulatingComboBox = false; // Reset flag after populating JComboBox
        } catch (IOException | ParseException e) {
            Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Error loading accounts. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void resetEditAccountFields() {
        accountToEditSelection.setSelectedIndex(0); // Reset to "Select Account"
        newUsernameField.setText("");
        newPasswordField.setText("");
        typeSelection.setSelectedIndex(0); // Reset the type selection
        disableEditFields();
    }

    private void disableEditFields() {
        newUsernameField.setEnabled(false);
        newPasswordField.setEnabled(false);
        typeSelection.setEnabled(false);
        saveEditButton.setEnabled(false);
    }

    private void enableEditFields() {
        newUsernameField.setEnabled(true);
        newPasswordField.setEnabled(true);
        typeSelection.setEnabled(true);
        saveEditButton.setEnabled(true);
    }

    private void populateDisableFeaturesTable(String type, JSONObject account) {
        DefaultTableModel model = (DefaultTableModel) disableFeaturesTable.getModel();
        model.setRowCount(0);

        String[] features = switch (type) {
            case "Player" ->
                new String[]{"Start Game", "Leaderboard", "History", "Profile"};
            case "Game Master" ->
                new String[]{"Create Quiz", "Delete Quiz", "Edit Quiz", "Leaderboard", "History", "Profile"};
            case "Administrator" ->
                new String[]{"Create Quiz", "Delete Quiz", "Edit Quiz", "Leaderboard", "History", "Profile", "Edit Account", "Disable Feature"};
            default ->
                new String[]{};
        };

        JSONArray disabledFeatures = account.get("disabledFeature") instanceof JSONArray
                ? (JSONArray) account.get("disabledFeature")
                : new JSONArray();

        for (String feature : features) {
            model.addRow(new Object[]{feature, disabledFeatures.contains(feature)});
        }
    }

    private void configureDisableFeaturesTable() {
        disableFeaturesTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{"Features", "Check to Disable"}
        ) {
            Class<?>[] columnTypes = new Class<?>[]{String.class, Boolean.class};

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return columnTypes[columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 1; // Only the checkbox column is editable
            }
        });
    }

    private JSONObject readJSONFile(String filePath) throws IOException, ParseException {
        try (FileReader reader = new FileReader(filePath)) {
            JSONParser parser = new JSONParser();
            return (JSONObject) parser.parse(reader);
        }
    }

    private void writeJSONFile(String filePath, JSONObject data) throws IOException {
        try (FileWriter writer = new FileWriter(filePath)) {
            writer.write(data.toJSONString());
            writer.flush();
        }
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            new Administrator("Admin", "User").setVisible(true);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Panes;
    private javax.swing.JComboBox<String> accountToDisableSelection;
    private javax.swing.JComboBox<String> accountToEditSelection;
    private javax.swing.JPanel admin;
    private javax.swing.JButton createQuizButton;
    private javax.swing.JButton deleteQuizButton;
    private javax.swing.JButton disableFeatureButton;
    private javax.swing.JTable disableFeaturesTable;
    private javax.swing.JPanel disable_account_feature_pane;
    private javax.swing.JButton editAccountButton;
    private javax.swing.JButton editQuizButton;
    private javax.swing.JPanel edit_account_pane;
    private javax.swing.JButton historyButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton leaderboardButton;
    private javax.swing.JButton logoutButton;
    private javax.swing.JPanel menu_pane;
    private javax.swing.JButton menubutton;
    private javax.swing.JTextField newPasswordField;
    private javax.swing.JTextField newUsernameField;
    private javax.swing.JButton profileButton;
    private javax.swing.JButton saveEditButton;
    private javax.swing.JButton saveStatusButton;
    private javax.swing.JComboBox<String> statusSelection;
    private javax.swing.JComboBox<String> typeSelection;
    private javax.swing.JLabel welcomeMessage;
    // End of variables declaration//GEN-END:variables
}
