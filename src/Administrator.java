
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class Administrator extends javax.swing.JFrame {

    private static String newUser, newPassword, newType, newStatus, UserSelection, UserSelection1;
    private final JSONArray changedAccount = new JSONArray();
    private final String usname;
    private final String adminName;

    private static final String[] FILE_PATH = {"src/QuizData.json", "src/UserData.json"};

    public Administrator(String adminName, String usname) {
        this.adminName = adminName;
        this.usname = usname;
        initComponents();

        populateUserSelection();
        populateUserSelection_disable_account_feature();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        admin = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        edit_accountbutton = new javax.swing.JButton();
        delete_account_featurebutton = new javax.swing.JButton();
        menubutton = new javax.swing.JButton();
        Panes = new javax.swing.JTabbedPane();
        edit_account_pane = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        savebutton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        typeSelection = new javax.swing.JComboBox<>();
        selectAccount = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        backbutton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        userUI = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        passwordUI = new javax.swing.JTextField();
        statusSelection = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        userSelection = new javax.swing.JComboBox<>();
        disable_account_feature_pane = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        backbutton1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        selectAccount1 = new javax.swing.JButton();
        userSelection1 = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        featureSelection = new javax.swing.JComboBox<>();
        selectfeature = new javax.swing.JButton();
        selectedUser2 = new javax.swing.JLabel();
        menu_pane = new javax.swing.JPanel();
        leaderboardButton = new javax.swing.JButton();
        historyButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        admin.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setText("Welcome Administrator");

        edit_accountbutton.setText("Edit a Account");
        edit_accountbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit_accountbuttonActionPerformed(evt);
            }
        });

        delete_account_featurebutton.setText("Disable a Account's Feature");
        delete_account_featurebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_account_featurebuttonActionPerformed(evt);
            }
        });

        menubutton.setText("Menu");
        menubutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menubuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminLayout = new javax.swing.GroupLayout(admin);
        admin.setLayout(adminLayout);
        adminLayout.setHorizontalGroup(
            adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminLayout.createSequentialGroup()
                .addGroup(adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adminLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(delete_account_featurebutton))
                    .addGroup(adminLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel1))
                    .addGroup(adminLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(menubutton))
                    .addGroup(adminLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(edit_accountbutton)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        adminLayout.setVerticalGroup(
            adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(edit_accountbutton)
                .addGap(28, 28, 28)
                .addComponent(delete_account_featurebutton)
                .addGap(30, 30, 30)
                .addComponent(menubutton)
                .addContainerGap(273, Short.MAX_VALUE))
        );

        getContentPane().add(admin, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 466));

        jLabel3.setText("Edit an Account Tab");

        savebutton.setText("Save Changes");
        savebutton.setEnabled(false);
        savebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebuttonActionPerformed(evt);
            }
        });

        jLabel4.setText("List of Account");

        typeSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Game Master", "Player" }));
        typeSelection.setEnabled(false);

        selectAccount.setText("Select");
        selectAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAccountActionPerformed(evt);
            }
        });

        jLabel7.setText("Account's Type");

        jLabel5.setText("******");

        backbutton.setText("Reset");
        backbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbuttonActionPerformed(evt);
            }
        });

        jLabel6.setText("New Username :");

        userUI.setEnabled(false);

        jLabel8.setText("******");

        jLabel9.setText("New Password :");

        passwordUI.setEnabled(false);

        statusSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Accessible", "Disabled" }));
        statusSelection.setEnabled(false);

        jLabel10.setText("Status of Account");

        javax.swing.GroupLayout edit_account_paneLayout = new javax.swing.GroupLayout(edit_account_pane);
        edit_account_pane.setLayout(edit_account_paneLayout);
        edit_account_paneLayout.setHorizontalGroup(
            edit_account_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, edit_account_paneLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(savebutton)
                .addGap(166, 166, 166))
            .addGroup(edit_account_paneLayout.createSequentialGroup()
                .addGroup(edit_account_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(edit_account_paneLayout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(edit_account_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(edit_account_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addGroup(edit_account_paneLayout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(userUI, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel8)
                                .addGroup(edit_account_paneLayout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(passwordUI, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(edit_account_paneLayout.createSequentialGroup()
                                    .addGroup(edit_account_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(statusSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel10))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(edit_account_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, edit_account_paneLayout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addGap(29, 29, 29))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, edit_account_paneLayout.createSequentialGroup()
                                            .addComponent(typeSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(20, 20, 20)))))
                            .addGroup(edit_account_paneLayout.createSequentialGroup()
                                .addComponent(userSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(selectAccount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(backbutton))))
                    .addGroup(edit_account_paneLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel3)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        edit_account_paneLayout.setVerticalGroup(
            edit_account_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(edit_account_paneLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel3)
                .addGap(49, 49, 49)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(edit_account_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectAccount)
                    .addComponent(backbutton))
                .addGap(56, 56, 56)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(edit_account_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(userUI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(edit_account_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(passwordUI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(edit_account_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(edit_account_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(savebutton)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        Panes.addTab("tab1", edit_account_pane);

        jLabel2.setText("Disable an Account's Feature");

        backbutton1.setText("Reset");
        backbutton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbutton1ActionPerformed(evt);
            }
        });

        jLabel11.setText("List of Account");

        selectAccount1.setText("Select");
        selectAccount1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAccount1ActionPerformed(evt);
            }
        });

        jLabel13.setText("Feature");

        featureSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Leaderboards", "History" }));
        featureSelection.setEnabled(false);

        selectfeature.setText("Select");
        selectfeature.setEnabled(false);
        selectfeature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectfeatureActionPerformed(evt);
            }
        });

        selectedUser2.setText("******");

        javax.swing.GroupLayout disable_account_feature_paneLayout = new javax.swing.GroupLayout(disable_account_feature_pane);
        disable_account_feature_pane.setLayout(disable_account_feature_paneLayout);
        disable_account_feature_paneLayout.setHorizontalGroup(
            disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                .addGroup(disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel2))
                    .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel13)
                            .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                                .addComponent(userSelection1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(selectAccount1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(backbutton1))
                            .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                                .addComponent(featureSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(selectfeature))
                            .addComponent(selectedUser2))))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        disable_account_feature_paneLayout.setVerticalGroup(
            disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel2)
                .addGap(39, 39, 39)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userSelection1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectAccount1)
                    .addComponent(backbutton1))
                .addGap(32, 32, 32)
                .addComponent(selectedUser2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(featureSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectfeature))
                .addContainerGap(222, Short.MAX_VALUE))
        );

        Panes.addTab("tab2", disable_account_feature_pane);

        leaderboardButton.setText("Leaderboard");

        historyButton.setText("History");
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        jButton3.setText("Create Quiz");

        jButton4.setText("Delete Quiz");

        jButton5.setText("Edit Quiz");

        javax.swing.GroupLayout menu_paneLayout = new javax.swing.GroupLayout(menu_pane);
        menu_pane.setLayout(menu_paneLayout);
        menu_paneLayout.setHorizontalGroup(
            menu_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menu_paneLayout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addGroup(menu_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(leaderboardButton, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(historyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        menu_paneLayout.setVerticalGroup(
            menu_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menu_paneLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(leaderboardButton)
                .addGap(18, 18, 18)
                .addComponent(historyButton)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addContainerGap(221, Short.MAX_VALUE))
        );

        Panes.addTab("tab3", menu_pane);

        getContentPane().add(Panes, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, -44, 460, 510));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void edit_accountbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edit_accountbuttonActionPerformed

        Panes.setSelectedIndex(0);

    }//GEN-LAST:event_edit_accountbuttonActionPerformed

    private void delete_account_featurebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_account_featurebuttonActionPerformed

        Panes.setSelectedIndex(1);

    }//GEN-LAST:event_delete_account_featurebuttonActionPerformed

    private void menubuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menubuttonActionPerformed

        Panes.setSelectedIndex(2);

    }//GEN-LAST:event_menubuttonActionPerformed

    private void savebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebuttonActionPerformed

        UserSelection = userSelection.getSelectedItem().toString();
        newUser = userUI.getText();
        newPassword = passwordUI.getText();
        newType = typeSelection.getSelectedItem().toString();
        newStatus = statusSelection.getSelectedItem().toString();

        if (newUser.isEmpty()) {

            JOptionPane.showMessageDialog(null, "Please Enter an Username");
            return;

        }

        if (newPassword.isEmpty()) {

            JOptionPane.showMessageDialog(null, "Please Enter an Password");
            return;

        }

        try {

            Editification();

        } catch (IOException ex) {
            Logger.getLogger(Edit_Account.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(Edit_Account.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_savebuttonActionPerformed

    private void selectAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAccountActionPerformed

        try {

            selectedUser();

        } catch (IOException ex) {
            Logger.getLogger(Edit_Account.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(Edit_Account.class.getName()).log(Level.SEVERE, null, ex);
        }

        disableComponent();

    }//GEN-LAST:event_selectAccountActionPerformed

    private void backbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbuttonActionPerformed

        jLabel5.setText("******");
        jLabel8.setText("******");

        userSelection.setSelectedItem(0);
        userSelection.setEnabled(true);

        selectAccount.setEnabled(true);

        userUI.setText("");
        userUI.setEnabled(false);

        passwordUI.setText("");
        passwordUI.setEnabled(false);

        statusSelection.setSelectedItem(0);
        statusSelection.setEnabled(false);

        typeSelection.setSelectedItem(0);
        typeSelection.setEnabled(false);

        savebutton.setEnabled(false);

        //Work in Porgress back button jframe
        //setVisible(false);
        //Administrator x = new Administrator();
        //x.setVisible(true);
    }//GEN-LAST:event_backbuttonActionPerformed

    private void backbutton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbutton1ActionPerformed

        selectedUser2.setText("******");

        userSelection1.setSelectedItem(0);
        userSelection1.setEnabled(true);

        selectAccount1.setEnabled(true);

        selectfeature.setEnabled(false);
        featureSelection.setEnabled(false);

    }//GEN-LAST:event_backbutton1ActionPerformed

    private void selectAccount1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAccount1ActionPerformed

        try {

            selectedUser2();

        } catch (IOException ex) {
            Logger.getLogger(Edit_Account.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(Edit_Account.class.getName()).log(Level.SEVERE, null, ex);
        }

        disableComponent2();

    }//GEN-LAST:event_selectAccount1ActionPerformed

    private void selectfeatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectfeatureActionPerformed

        UserSelection1 = userSelection.getSelectedItem().toString();

        try {

            Editification_disable_account_feature();
            featureSelection.setEnabled(false);
            selectfeature.setEnabled(false);

        } catch (IOException ex) {
            Logger.getLogger(Edit_Account.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(Edit_Account.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_selectfeatureActionPerformed

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed
        this.setVisible(false);
        new History(adminName, usname, "GameMaster", "GameMaster").setVisible(true);
    }//GEN-LAST:event_historyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Administrator("admin", "test").setVisible(true);
        });
    }

    private void Editification() throws IOException, ParseException {

        statusSelection.getSelectedItem();
        typeSelection.getSelectedItem();

        newUser = userUI.getText();
        newPassword = passwordUI.getText();

        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray userlist = (JSONArray) data.get("Accounts");

            for (int i = 0; i < userlist.size(); i++) {

                Object obj = userlist.get(i);

                if (obj instanceof JSONObject) {

                    JSONObject user = (JSONObject) obj;

                    String currentUsername = (String) user.get("username");

                    if (currentUsername.equals(userSelection.getSelectedItem().toString())) {
                        // Update values
                        user.put("username", newUser);
                        user.put("password", newPassword);
                        user.put("status", newStatus);
                        user.put("type", newType);
                        break;
                    }

                }
            }
            // Write updated JSON back to file
            try (FileWriter writer = new FileWriter(FILE_PATH[1])) {
                writer.write(data.toJSONString());
                writer.flush();
            }

            JOptionPane.showMessageDialog(this, "User account updated successfully!");

        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Error loading usernames: " + e.getMessage());

        }
    }

    private void Editification_disable_account_feature() throws IOException, ParseException {

        featureSelection.getSelectedItem();

        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray userlist = (JSONArray) data.get("Accounts");

            for (int i = 0; i < userlist.size(); i++) {

                Object obj = userlist.get(i);

                if (obj instanceof JSONObject) {

                    JSONObject user = (JSONObject) obj;

                    String currentUsername = (String) user.get("username");

                    if (currentUsername.equals(userSelection1.getSelectedItem().toString())) {
                        // Update values
                        user.put("Disabled Feature", featureSelection.getSelectedItem().toString());

                        break;
                    }

                }
            }
            // Write updated JSON back to file
            try (FileWriter writer = new FileWriter(FILE_PATH[1])) {
                writer.write(data.toJSONString());
                writer.flush();
            }

            JOptionPane.showMessageDialog(this, "User account updated successfully!");

        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Error loading usernames: " + e.getMessage());
            e.printStackTrace();

        }
    }

    private void populateUserSelection() {

        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray userlist = (JSONArray) data.get("Accounts");

            // Loop through each item (each should be a JSONObject)
            for (int i = 0; i < userlist.size(); i++) {
                Object obj = userlist.get(i); // no getJSONObject()

                if (obj instanceof JSONObject) {
                    JSONObject account = (JSONObject) obj;

                    // Use has() + get() + instanceof to safely pull "username"
                    try {

                        Object usernameObj = account.get("username"); // throws if key missing

                        if (usernameObj instanceof String) {
                            userSelection.addItem((String) usernameObj);
                        }

                    } catch (Exception e) {
                        // "username" key not present, just skip
                    }
                }
            }

        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Error loading usernames: " + e.getMessage());
        }

    }

    private void populateUserSelection_disable_account_feature() {

        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray userlist = (JSONArray) data.get("Accounts");

            // Loop through each item (each should be a JSONObject)
            for (int i = 0; i < userlist.size(); i++) {
                Object obj = userlist.get(i); // no getJSONObject()

                if (obj instanceof JSONObject) {
                    JSONObject account = (JSONObject) obj;

                    // Use has() + get() + instanceof to safely pull "username"
                    try {

                        Object usernameObj = account.get("username"); // throws if key missing

                        if (usernameObj instanceof String) {
                            userSelection1.addItem((String) usernameObj);
                        }

                    } catch (Exception e) {
                        // "username" key not present, just skip
                    }
                }
            }

        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Error loading usernames: " + e.getMessage());
            e.printStackTrace();
        }

    }

    public void selectedUser() throws IOException, ParseException {

        String selecteduser = (String) userSelection.getSelectedItem();

        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray userlist = (JSONArray) data.get("Accounts");

            // Loop through each item (each should be a JSONObject)
            for (int i = 0; i < userlist.size(); i++) {

                Object obj = userlist.get(i);

                if (obj instanceof JSONObject) {

                    JSONObject user = (JSONObject) obj;

                    String currentUser = (String) user.get("username");
                    String currentPassword = (String) user.get("password");

                    if (currentUser.equals(selecteduser)) {

                        jLabel5.setText("Account's Current Username: " + user.get("username").toString());
                        jLabel8.setText("Account's Current Password: " + user.get("password").toString());
                    }
                }
            }
        }
    }

    public void selectedUser2() throws IOException, ParseException {

        String selecteduser = (String) userSelection.getSelectedItem();

        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray userlist = (JSONArray) data.get("Accounts");

            // Loop through each item (each should be a JSONObject)
            for (int i = 0; i < userlist.size(); i++) {

                Object obj = userlist.get(i);

                if (obj instanceof JSONObject) {

                    JSONObject user = (JSONObject) obj;

                    String currentUser = (String) user.get("username");

                    if (currentUser.equals(selecteduser)) {

                        selectedUser2.setText("Account's Current Username: " + user.get("username").toString());

                    }
                }
            }
        }
    }

    public void disableComponent2() {

        userSelection1.setEnabled(false);
        selectAccount1.setEnabled(false);

        featureSelection.setEnabled(true);
        selectfeature.setEnabled(true);

    }

    public void disableComponent() {

        userUI.setEnabled(true);
        passwordUI.setEnabled(true);
        savebutton.setEnabled(true);
        statusSelection.setEnabled(true);
        typeSelection.setEnabled(true);

        userSelection.setEnabled(false);
        selectAccount.setEnabled(false);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Panes;
    private javax.swing.JPanel admin;
    private javax.swing.JButton backbutton;
    private javax.swing.JButton backbutton1;
    private javax.swing.JButton delete_account_featurebutton;
    private javax.swing.JPanel disable_account_feature_pane;
    private javax.swing.JPanel edit_account_pane;
    private javax.swing.JButton edit_accountbutton;
    private javax.swing.JComboBox<String> featureSelection;
    private javax.swing.JButton historyButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton leaderboardButton;
    private javax.swing.JPanel menu_pane;
    private javax.swing.JButton menubutton;
    private javax.swing.JTextField passwordUI;
    private javax.swing.JButton savebutton;
    private javax.swing.JButton selectAccount;
    private javax.swing.JButton selectAccount1;
    private javax.swing.JLabel selectedUser2;
    private javax.swing.JButton selectfeature;
    private javax.swing.JComboBox<String> statusSelection;
    private javax.swing.JComboBox<String> typeSelection;
    private javax.swing.JComboBox<String> userSelection;
    private javax.swing.JComboBox<String> userSelection1;
    private javax.swing.JTextField userUI;
    // End of variables declaration//GEN-END:variables
}
