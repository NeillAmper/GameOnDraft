
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.io.FileReader;
import java.io.IOException;

public final class Administrator extends javax.swing.JFrame {

    private static String newUser, newPassword, newType, newStatus, UserSelection, UserSelection1;
    private final JSONArray changedAccount = new JSONArray();
    private final String adminName;
    private final String usname;
    private String Disabled_Feature; // Instance field for the disabled feature

    private static final String[] FILE_PATH = {"src/QuizData.json", "src/UserData.json"};

    public Administrator(String adminName, String usname) {
        initComponents();
        this.adminName = adminName;
        this.usname = usname;

        populateUserSelection();
        populateUserSelection_disable_account_feature();
        Current_Disabled_Feature(); // Dynamically enable/disable buttons based on Disabled_Feature
        welcomeMessage.setText("Welcome, Administrator " + adminName + "!"); // âœ… Fixed from usernameLabel

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        admin = new javax.swing.JPanel();
        welcomeMessage = new javax.swing.JLabel();
        editAccountButton = new javax.swing.JButton();
        disableFeatureButton = new javax.swing.JButton();
        menubutton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        Panes = new javax.swing.JTabbedPane();
        menu_pane = new javax.swing.JPanel();
        leaderboardButton = new javax.swing.JButton();
        historyButton = new javax.swing.JButton();
        createQuizButton = new javax.swing.JButton();
        deleteQuizButton = new javax.swing.JButton();
        editQuizButton = new javax.swing.JButton();
        profileButton = new javax.swing.JButton();
        edit_account_pane = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        savebutton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        typeSelection = new javax.swing.JComboBox<>();
        selectAccount = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        backbutton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        userUI = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        passwordUI = new javax.swing.JTextField();
        statusSelection = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        userSelection = new javax.swing.JComboBox<>();
        disable_account_feature_pane = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        backbutton1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        selectAccount1 = new javax.swing.JButton();
        userSelection1 = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        featureSelection = new javax.swing.JComboBox<>();
        selectfeature = new javax.swing.JButton();
        selectedUser2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        admin.setBackground(new java.awt.Color(204, 204, 204));

        welcomeMessage.setText("Welcome Administrator");

        editAccountButton.setText("Edit a Account");
        editAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAccountButtonActionPerformed(evt);
            }
        });

        disableFeatureButton.setText("Disable a Account's Feature");
        disableFeatureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableFeatureButtonActionPerformed(evt);
            }
        });

        menubutton.setText("Menu");
        menubutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menubuttonActionPerformed(evt);
            }
        });

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminLayout = new javax.swing.GroupLayout(admin);
        admin.setLayout(adminLayout);
        adminLayout.setHorizontalGroup(
            adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminLayout.createSequentialGroup()
                .addGroup(adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adminLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(disableFeatureButton))
                    .addGroup(adminLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(welcomeMessage))
                    .addGroup(adminLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(logoutButton))
                    .addGroup(adminLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(menubutton))
                    .addGroup(adminLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(editAccountButton)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        adminLayout.setVerticalGroup(
            adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(welcomeMessage)
                .addGap(64, 64, 64)
                .addComponent(menubutton)
                .addGap(18, 18, 18)
                .addComponent(editAccountButton)
                .addGap(32, 32, 32)
                .addComponent(disableFeatureButton)
                .addGap(43, 43, 43)
                .addComponent(logoutButton)
                .addContainerGap(177, Short.MAX_VALUE))
        );

        getContentPane().add(admin, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 466));

        leaderboardButton.setText("Leaderboard");
        leaderboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaderboardButtonActionPerformed(evt);
            }
        });

        historyButton.setText("History");
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        createQuizButton.setText("Create Quiz");
        createQuizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createQuizButtonActionPerformed(evt);
            }
        });

        deleteQuizButton.setText("Delete Quiz");
        deleteQuizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteQuizButtonActionPerformed(evt);
            }
        });

        editQuizButton.setText("Edit Quiz");
        editQuizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editQuizButtonActionPerformed(evt);
            }
        });

        profileButton.setText("Profile");

        javax.swing.GroupLayout menu_paneLayout = new javax.swing.GroupLayout(menu_pane);
        menu_pane.setLayout(menu_paneLayout);
        menu_paneLayout.setHorizontalGroup(
            menu_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menu_paneLayout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addGroup(menu_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(leaderboardButton, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(historyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createQuizButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteQuizButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editQuizButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(profileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        menu_paneLayout.setVerticalGroup(
            menu_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menu_paneLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(leaderboardButton)
                .addGap(18, 18, 18)
                .addComponent(historyButton)
                .addGap(18, 18, 18)
                .addComponent(createQuizButton)
                .addGap(18, 18, 18)
                .addComponent(deleteQuizButton)
                .addGap(18, 18, 18)
                .addComponent(editQuizButton)
                .addGap(18, 18, 18)
                .addComponent(profileButton)
                .addContainerGap(184, Short.MAX_VALUE))
        );

        Panes.addTab("tab3", menu_pane);

        edit_account_pane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setText("Edit an Account Tab");
        edit_account_pane.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, -1, -1));

        savebutton.setText("Save Changes");
        savebutton.setEnabled(false);
        savebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebuttonActionPerformed(evt);
            }
        });
        edit_account_pane.add(savebutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 390, -1, -1));

        jLabel4.setText("List of Account");
        edit_account_pane.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 102, -1, -1));

        typeSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Game Master", "Player" }));
        typeSelection.setEnabled(false);
        edit_account_pane.add(typeSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(293, 355, -1, -1));

        selectAccount.setText("Select");
        selectAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAccountActionPerformed(evt);
            }
        });
        edit_account_pane.add(selectAccount, new org.netbeans.lib.awtextra.AbsoluteConstraints(266, 125, -1, -1));

        jLabel7.setText("Account's Type");
        edit_account_pane.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(307, 332, -1, -1));

        jLabel5.setText("******");
        edit_account_pane.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 204, -1, -1));

        backbutton.setText("Reset");
        backbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbuttonActionPerformed(evt);
            }
        });
        edit_account_pane.add(backbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 125, -1, -1));

        jLabel6.setText("New Username :");
        edit_account_pane.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 230, -1, -1));

        userUI.setEnabled(false);
        edit_account_pane.add(userUI, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 227, 245, -1));

        jLabel8.setText("******");
        edit_account_pane.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 268, -1, -1));

        jLabel9.setText("New Password :");
        edit_account_pane.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 294, -1, -1));

        passwordUI.setEnabled(false);
        edit_account_pane.add(passwordUI, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 291, 245, -1));

        statusSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Accessible", "Disabled" }));
        statusSelection.setEnabled(false);
        edit_account_pane.add(statusSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(78, 355, -1, -1));

        jLabel10.setText("Status of Account");
        edit_account_pane.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 332, -1, -1));

        edit_account_pane.add(userSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 125, 180, -1));

        Panes.addTab("tab1", edit_account_pane);

        jLabel2.setText("Disable an Account's Feature");

        backbutton1.setText("Reset");
        backbutton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbutton1ActionPerformed(evt);
            }
        });

        jLabel11.setText("List of Account");

        selectAccount1.setText("Select");
        selectAccount1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAccount1ActionPerformed(evt);
            }
        });

        jLabel13.setText("Feature");

        featureSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Leaderboards", "History" }));
        featureSelection.setEnabled(false);

        selectfeature.setText("Select");
        selectfeature.setEnabled(false);
        selectfeature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectfeatureActionPerformed(evt);
            }
        });

        selectedUser2.setText("******");

        javax.swing.GroupLayout disable_account_feature_paneLayout = new javax.swing.GroupLayout(disable_account_feature_pane);
        disable_account_feature_pane.setLayout(disable_account_feature_paneLayout);
        disable_account_feature_paneLayout.setHorizontalGroup(
            disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13)
                    .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                        .addComponent(featureSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectfeature))
                    .addComponent(selectedUser2)
                    .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                        .addGroup(disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(userSelection1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(selectAccount1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(backbutton1)))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        disable_account_feature_paneLayout.setVerticalGroup(
            disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(disable_account_feature_paneLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel2)
                .addGap(38, 38, 38)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userSelection1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectAccount1)
                    .addComponent(backbutton1))
                .addGap(32, 32, 32)
                .addComponent(selectedUser2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(disable_account_feature_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(featureSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectfeature))
                .addContainerGap(222, Short.MAX_VALUE))
        );

        Panes.addTab("tab2", disable_account_feature_pane);

        getContentPane().add(Panes, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, -44, 460, 510));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void editAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAccountButtonActionPerformed

        Panes.setSelectedIndex(1);

    }//GEN-LAST:event_editAccountButtonActionPerformed

    private void disableFeatureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableFeatureButtonActionPerformed

        Panes.setSelectedIndex(2);

    }//GEN-LAST:event_disableFeatureButtonActionPerformed

    private void menubuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menubuttonActionPerformed

        Panes.setSelectedIndex(0);

    }//GEN-LAST:event_menubuttonActionPerformed

    private void savebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebuttonActionPerformed
        // Get user input from the UI
        UserSelection = userSelection.getSelectedItem() != null ? userSelection.getSelectedItem().toString() : "";
        if (UserSelection.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a user.", "Selection Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        newUser = userUI.getText();
        newPassword = passwordUI.getText();
        newType = (String) typeSelection.getSelectedItem();
        newStatus = (String) statusSelection.getSelectedItem();

        // Validate inputs
        if (newUser == null || newUser.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a new username.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (newPassword == null || newPassword.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a new password.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Call Editification to update the account details
            Editification();
        } catch (IOException | ParseException ex) {
            Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error updating user account. Please try again.", "Update Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_savebuttonActionPerformed

    private void selectAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAccountActionPerformed

    }//GEN-LAST:event_selectAccountActionPerformed

    private void backbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbuttonActionPerformed

        jLabel5.setText("******");
        jLabel8.setText("******");

        userSelection.setSelectedIndex(-1); // Deselect
        userSelection.setEnabled(true);

        selectAccount.setEnabled(true);

        userUI.setText("");
        userUI.setEnabled(false);

        passwordUI.setText("");
        passwordUI.setEnabled(false);

        statusSelection.setSelectedIndex(0);
        statusSelection.setEnabled(false);

        typeSelection.setSelectedIndex(0);
        typeSelection.setEnabled(false);

        savebutton.setEnabled(false);

        //Work in Porgress back button jframe
        //setVisible(false);
        //Administrator x = new Administrator();
        //x.setVisible(true);
    }//GEN-LAST:event_backbuttonActionPerformed

    private void backbutton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbutton1ActionPerformed

        selectedUser2.setText("******");

        userSelection1.setSelectedIndex(-1); // Deselect
        userSelection1.setEnabled(true);

        selectAccount1.setEnabled(true);

        featureSelection.setSelectedIndex(0);
        featureSelection.setEnabled(false);

        selectfeature.setEnabled(false);

    }//GEN-LAST:event_backbutton1ActionPerformed

    private void selectAccount1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAccount1ActionPerformed

    }//GEN-LAST:event_selectAccount1ActionPerformed

    private void selectfeatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectfeatureActionPerformed
        // Ensure a feature is selected before proceeding
        String selectedFeature = featureSelection.getSelectedItem() != null ? featureSelection.getSelectedItem().toString() : "";
        if (selectedFeature.trim().isEmpty() || selectedFeature.equals("None")) {
            JOptionPane.showMessageDialog(this, "Please select a valid feature to disable.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Ensure a user is selected before proceeding
        String selectedUser = userSelection1.getSelectedItem() != null ? userSelection1.getSelectedItem().toString() : "";
        if (selectedUser.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a user before disabling a feature.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Call the method to disable the selected feature for the selected user
            Editification_disable_account_feature();

            // Disable the feature selection components after the operation
            featureSelection.setEnabled(false);
            selectfeature.setEnabled(false);

            // Provide success feedback
            JOptionPane.showMessageDialog(this, "Feature '" + selectedFeature + "' disabled successfully for user '" + selectedUser + "'.", "Success", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException ex) {
            Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error saving disabled feature: " + ex.getMessage(), "Save Error", JOptionPane.ERROR_MESSAGE);
        } catch (ParseException ex) {
            Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error parsing user data: " + ex.getMessage(), "Parse Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_selectfeatureActionPerformed

    private void leaderboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaderboardButtonActionPerformed
        this.setVisible(false);
        // Navigate to the Leaderboard with the Game Master's details
        new Leaderboard(adminName, null, null, usname).setVisible(true);
    }//GEN-LAST:event_leaderboardButtonActionPerformed

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed
        this.setVisible(false);
        // Corrected the argument order and roles passed to the History class
        new History(adminName, usname, null, null).setVisible(true);
    }//GEN-LAST:event_historyButtonActionPerformed

    private void createQuizButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createQuizButtonActionPerformed
        this.setVisible(false);
        new CreateQuiz(adminName, usname, null).setVisible(true);
    }//GEN-LAST:event_createQuizButtonActionPerformed

    private void deleteQuizButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteQuizButtonActionPerformed
        this.setVisible(false);
        new DeleteQuiz(adminName, null, usname).setVisible(true);
    }//GEN-LAST:event_deleteQuizButtonActionPerformed

    private void editQuizButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editQuizButtonActionPerformed
        this.setVisible(false);
        new EditQuizTable(adminName, null, usname, null).setVisible(true);
    }//GEN-LAST:event_editQuizButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        SignIn b = new SignIn(usname, "pass");
        b.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_logoutButtonActionPerformed

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            new Administrator("Admin", "User").setVisible(true);
        });
    }

    private void Editification() throws IOException, ParseException {
        newUser = userUI.getText();
        newPassword = passwordUI.getText();

        if (newUser == null || newUser.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a new username.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (newPassword == null || newPassword.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a new password.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray userlist = (JSONArray) data.get("Accounts");

            for (Object obj : userlist) {
                if (obj instanceof JSONObject user) {
                    String currentUsername = (String) user.get("username");
                    if (currentUsername.equals(userSelection.getSelectedItem().toString())) {
                        // Update user details
                        user.put("username", newUser);
                        user.put("password", newPassword);
                        user.put("status", newStatus);
                        user.put("type", newType);
                        break;
                    }
                }
            }

            // Write updated JSON back to file
            try (FileWriter writer = new FileWriter(FILE_PATH[1])) {
                writer.write(data.toJSONString());
                writer.flush();
            }

            JOptionPane.showMessageDialog(this, "User account updated successfully!");
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "The user data file is missing. Please contact support.", "File Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException | ParseException e) {
            Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Error updating user account. Please try again.", "Update Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Editification_disable_account_feature() throws IOException, ParseException {
        String selectedFeature = (String) featureSelection.getSelectedItem();
        String selectedUser = userSelection1.getSelectedItem() != null ? userSelection1.getSelectedItem().toString() : "";
        if (selectedUser.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a user.", "Selection Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (selectedFeature == null || selectedFeature.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a feature to disable.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (selectedUser == null || selectedUser.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a user.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray userlist = (JSONArray) data.get("Accounts");

            for (Object obj : userlist) {
                if (obj instanceof JSONObject user) {
                    String currentUsername = (String) user.get("username");
                    if (currentUsername.equals(selectedUser)) {
                        user.put("Disabled Feature", selectedFeature);
                        break;
                    }
                }
            }

            try (FileWriter writer = new FileWriter(FILE_PATH[1])) {
                writer.write(data.toJSONString());
                writer.flush();
            }

            JOptionPane.showMessageDialog(this, "Feature disabled successfully!");
        } catch (IOException | ParseException e) {
            Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "An unexpected error occurred while disabling the feature. Please contact support.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void populateUserSelection() {
        populateUserSelectionCombo(userSelection);
    }

    private void populateUserSelection_disable_account_feature() {
        populateUserSelectionCombo(userSelection1);
    }

    public void selectedUser() throws IOException, ParseException {
        String selecteduser = (String) userSelection.getSelectedItem();
        if (selecteduser == null || selecteduser.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a user.", "Selection Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray userlist = (JSONArray) data.get("Accounts");

            for (Object obj : userlist) {
                if (obj instanceof JSONObject user) {
                    String currentUser = (String) user.get("username");
                    if (currentUser.equals(selecteduser)) {
                        jLabel5.setText("Account's Current Username: " + user.getOrDefault("username", "N/A"));
                        jLabel8.setText("Account's Current Password: " + user.getOrDefault("password", "N/A"));
                        return;
                    }
                }
            }

            JOptionPane.showMessageDialog(this, "User not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void selectedUser2() throws IOException, ParseException {

        String selecteduser = (String) userSelection.getSelectedItem();

        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray userlist = (JSONArray) data.get("Accounts");

            // Loop through each item (each should be a JSONObject)
            for (int i = 0; i < userlist.size(); i++) {

                Object obj = userlist.get(i);

                if (obj instanceof JSONObject user) {

                    String currentUser = (String) user.get("username");

                    if (currentUser.equals(selecteduser)) {

                        selectedUser2.setText("Account's Current Username: " + user.get("username").toString());

                    }
                }
            }
        }
    }

    public void disableComponent2() {

        userSelection1.setEnabled(false);
        selectAccount1.setEnabled(false);

        featureSelection.setEnabled(true);
        selectfeature.setEnabled(true);

    }

    public void disableComponent() {

        userUI.setEnabled(true);
        passwordUI.setEnabled(true);
        savebutton.setEnabled(true);
        statusSelection.setEnabled(true);
        typeSelection.setEnabled(true);

        userSelection.setEnabled(false);
        selectAccount.setEnabled(false);
    }

    private void populateUserSelectionCombo(javax.swing.JComboBox<String> comboBox) {
        try (FileReader reader = new FileReader(FILE_PATH[1])) {
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);
            JSONArray userlist = (JSONArray) data.get("Accounts");

            comboBox.removeAllItems(); // Clear existing items

            for (Object obj : userlist) {
                if (obj instanceof JSONObject account) {
                    String username = (String) account.get("username");
                    if (username != null) {
                        comboBox.addItem(username);
                    }
                }
            }
        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Error loading user data: " + e.getMessage(), "Load Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void Current_Disabled_Feature() {
        Disabled_Feature = "None"; // Default value in case of error or missing data

        try (FileReader reader = new FileReader("src/UserData.json")) {
            // Parse the JSON file
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);

            // Get the "Accounts" array
            JSONArray accounts = (JSONArray) data.get("Accounts");

            // Search for the account matching the current username
            for (Object obj : accounts) {
                JSONObject account = (JSONObject) obj;
                String username = (String) account.get("username");

                if (username.equals(adminName)) {
                    // Get the disabledFeature value
                    Object disabledFeatureObject = account.get("disabledFeature");

                    // Reset all buttons to enabled (default state)
                    leaderboardButton.setEnabled(true);
                    historyButton.setEnabled(true);
                    createQuizButton.setEnabled(true);
                    deleteQuizButton.setEnabled(true);
                    editQuizButton.setEnabled(true);
                    editAccountButton.setEnabled(true);
                    disableFeatureButton.setEnabled(true);
                    profileButton.setEnabled(true); // Reset profileButton to enabled
                    // Check if disabledFeature is an array or single string
                    switch (disabledFeatureObject) {
                        case JSONArray disabledFeaturesArray -> {

                            // Disable buttons based on the array contents
                            for (Object feature : disabledFeaturesArray) {
                                String featureName = (String) feature;

                                switch (featureName) {
                                    case "Leaderboard" ->
                                        leaderboardButton.setEnabled(false);
                                    case "History" ->
                                        historyButton.setEnabled(false);
                                    case "CreateQuiz" ->
                                        createQuizButton.setEnabled(false);
                                    case "DeleteQuiz" ->
                                        deleteQuizButton.setEnabled(false);
                                    case "EditQuiz" ->
                                        editQuizButton.setEnabled(false);
                                    case "EditAccount" ->
                                        editAccountButton.setEnabled(false);
                                    case "DisableFeature" ->
                                        disableFeatureButton.setEnabled(false);
                                    case "Profile" ->
                                        profileButton.setEnabled(false); // Disable profileButton
                                }
                            }
                        }
                        case String string -> {
                            // Handle disabledFeature as a single string (fallback for older format)
                            Disabled_Feature = string;

                            switch (Disabled_Feature) {
                                case "None" -> {
                                    // All buttons remain enabled
                                }
                                case "Leaderboard" ->
                                    leaderboardButton.setEnabled(false);
                                case "History" ->
                                    historyButton.setEnabled(false);
                                case "CreateQuiz" ->
                                    createQuizButton.setEnabled(false);
                                case "DeleteQuiz" ->
                                    deleteQuizButton.setEnabled(false);
                                case "EditQuiz" ->
                                    editQuizButton.setEnabled(false);
                                case "EditAccount" ->
                                    editAccountButton.setEnabled(false);
                                case "DisableFeature" ->
                                    disableFeatureButton.setEnabled(false);
                                case "Profile" ->
                                    profileButton.setEnabled(false); // Disable profileButton
                            }
                        }
                        default -> {
                        }
                    }

                    break; // Exit loop once the matching account is found
                }
            }
        } catch (IOException | ParseException e) {
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Panes;
    private javax.swing.JPanel admin;
    private javax.swing.JButton backbutton;
    private javax.swing.JButton backbutton1;
    private javax.swing.JButton createQuizButton;
    private javax.swing.JButton deleteQuizButton;
    private javax.swing.JButton disableFeatureButton;
    private javax.swing.JPanel disable_account_feature_pane;
    private javax.swing.JButton editAccountButton;
    private javax.swing.JButton editQuizButton;
    private javax.swing.JPanel edit_account_pane;
    private javax.swing.JComboBox<String> featureSelection;
    private javax.swing.JButton historyButton;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton leaderboardButton;
    private javax.swing.JButton logoutButton;
    private javax.swing.JPanel menu_pane;
    private javax.swing.JButton menubutton;
    private javax.swing.JTextField passwordUI;
    private javax.swing.JButton profileButton;
    private javax.swing.JButton savebutton;
    private javax.swing.JButton selectAccount;
    private javax.swing.JButton selectAccount1;
    private javax.swing.JLabel selectedUser2;
    private javax.swing.JButton selectfeature;
    private javax.swing.JComboBox<String> statusSelection;
    private javax.swing.JComboBox<String> typeSelection;
    private javax.swing.JComboBox<String> userSelection;
    private javax.swing.JComboBox<String> userSelection1;
    private javax.swing.JTextField userUI;
    private javax.swing.JLabel welcomeMessage;
    // End of variables declaration//GEN-END:variables
}
