
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.io.FileReader;
import java.io.IOException;

public final class Player extends javax.swing.JFrame {

    private final String playerName;
    private final String usname;
    private String Disabled_Feature; // Instance field for the disabled feature

    public Player(String playerName, String player, int par, int par1, String player1, String usname) {
        this.playerName = playerName; // âœ… Store it for later use
        this.usname = usname;
        initComponents();
        jLabel1.setText("Welcome, Player " + playerName + "!"); // DYNAMIC GREETING
        Current_Disabled_Feature(); // Dynamically enable/disable buttons based on Disabled_Feature
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        StartGame = new javax.swing.JButton();
        Profile = new javax.swing.JButton();
        Leaderboard = new javax.swing.JButton();
        History = new javax.swing.JButton();
        Logout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Welcome, Player (...)!");

        StartGame.setText("Start Game");
        StartGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartGameActionPerformed(evt);
            }
        });

        Profile.setText("Profile");
        Profile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProfileActionPerformed(evt);
            }
        });

        Leaderboard.setText("Leaderboards");
        Leaderboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeaderboardActionPerformed(evt);
            }
        });

        History.setText("History");
        History.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistoryActionPerformed(evt);
            }
        });

        Logout.setText("Logout");
        Logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(StartGame)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Leaderboard)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Profile)
                                    .addComponent(History)
                                    .addComponent(Logout))
                                .addGap(24, 24, 24))))
                    .addComponent(jLabel1))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(StartGame)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Leaderboard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(History)
                .addGap(18, 18, 18)
                .addComponent(Profile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(Logout)
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void LogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutActionPerformed
        SignIn b = new SignIn(usname, "test");
        b.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_LogoutActionPerformed

    private void LeaderboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeaderboardActionPerformed
        this.dispose();
        // Navigate to the Leaderboard with the player's details
        new Leaderboard(null, null, playerName, usname).setVisible(true);
    }//GEN-LAST:event_LeaderboardActionPerformed

    private void HistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistoryActionPerformed
        this.dispose();
        new History(null, null, playerName, usname).setVisible(true);
    }//GEN-LAST:event_HistoryActionPerformed

    private void StartGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartGameActionPerformed
        this.dispose();
        new QuizSelection(playerName, "Player", "Player", usname).setVisible(true);
    }//GEN-LAST:event_StartGameActionPerformed

    private void ProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProfileActionPerformed
        this.dispose();
        // Pass the correct username to the Profile constructor
        new Profile(null, null, playerName, usname).setVisible(true);
    }//GEN-LAST:event_ProfileActionPerformed

    public void Current_Disabled_Feature() {
        Disabled_Feature = "None"; // Default value in case of error or missing data

        try (FileReader reader = new FileReader("src/UserData.json")) {
            // Parse the JSON file
            JSONParser parser = new JSONParser();
            JSONObject data = (JSONObject) parser.parse(reader);

            // Get the "Accounts" array
            JSONArray accounts = (JSONArray) data.get("Accounts");

            // Search for the account matching the current username
            for (Object obj : accounts) {
                JSONObject account = (JSONObject) obj;
                String username = (String) account.get("username");

                if (username.equals(playerName)) {
                    // Get the disabledFeature value
                    Object disabledFeatureObject = account.get("disabledFeature");

                    // Reset all buttons to enabled (default state)
                    StartGame.setEnabled(true);
                    Leaderboard.setEnabled(true);
                    History.setEnabled(true);
                    Profile.setEnabled(true);

                    // Check if disabledFeature is an array or single string
                    if (disabledFeatureObject instanceof JSONArray disabledFeaturesArray) {

                        // Disable buttons based on the array contents
                        for (Object feature : disabledFeaturesArray) {
                            String featureName = (String) feature;

                            switch (featureName) {
                                case "StartGame" ->
                                    StartGame.setEnabled(false);
                                case "Leaderboard" ->
                                    Leaderboard.setEnabled(false);
                                case "History" ->
                                    History.setEnabled(false);
                                case "Profile" ->
                                    Profile.setEnabled(false);
                            }
                        }
                    } else if (disabledFeatureObject instanceof String string) {
                        // Handle disabledFeature as a single string (fallback for older format)
                        Disabled_Feature = string;

                        switch (Disabled_Feature) {
                            case "None" -> {
                                // All buttons remain enabled
                            }
                            case "StartGame" ->
                                StartGame.setEnabled(false);
                            case "Leaderboard" ->
                                Leaderboard.setEnabled(false);
                            case "History" ->
                                History.setEnabled(false);
                            case "Profile" ->
                                Profile.setEnabled(false);
                        }
                    }

                    break; // Exit loop once the matching account is found
                }
            }
        } catch (IOException | ParseException e) {
        }
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            new Player("TestName", "Player", 1, 2, "Player", "Player").setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton History;
    private javax.swing.JButton Leaderboard;
    private javax.swing.JButton Logout;
    private javax.swing.JButton Profile;
    private javax.swing.JButton StartGame;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
